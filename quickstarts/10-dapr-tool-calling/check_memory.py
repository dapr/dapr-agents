#!/usr/bin/env python3

"""
Simple script to check the conversation memory state
to see what responses were generated by the AssistantAgent.
"""

import asyncio
import sys
from pathlib import Path

from dapr_agents.memory.daprstatestore import ConversationDaprStateMemory


# Add the parent directory to the path so we can import dapr_agents
sys.path.append(str(Path(__file__).parent.parent.parent))


async def check_conversation_memory(session_id: str = "demo-session"):
    """Check what's stored in the conversation memory."""

    print(f"🔍 Checking conversation memory for session: {session_id}")
    print("=" * 50)

    try:
        # Initialize the same memory store used by the assistant
        memory = ConversationDaprStateMemory(
            store_name="conversationstore", session_id=session_id
        )

        # Get the conversation history
        messages = memory.get_messages()

        if not messages:
            print("📭 No messages found in conversation memory.")
            return

        print(f"📜 Found {len(messages)} messages:")
        print()

        for i, msg in enumerate(messages, 1):
            role = msg.get("role", "unknown")
            content = msg.get("content", "")

            print(f"{i}. **{role.upper()}**:")

            if isinstance(content, str):
                print(f"   {content}")
            elif isinstance(content, list):
                for part in content:
                    if isinstance(part, dict):
                        if "text" in part:
                            print(f"   Text: {part['text']}")
                        elif "tool_call" in part:
                            tool_call = part["tool_call"]
                            print(
                                f"   Tool Call: {tool_call.get('name', 'unknown')}({tool_call.get('arguments', {})})"
                            )
                        elif "tool_result" in part:
                            tool_result = part["tool_result"]
                            print(
                                f"   Tool Result: {tool_result.get('content', 'N/A')}"
                            )
                    else:
                        print(f"   {part}")
            else:
                print(f"   {content}")

            print()

        # Check for tool calls specifically
        tool_calls_found = 0
        tool_results_found = 0

        for msg in messages:
            content = msg.get("content", "")
            if isinstance(content, list):
                for part in content:
                    if isinstance(part, dict):
                        if "tool_call" in part:
                            tool_calls_found += 1
                        elif "tool_result" in part:
                            tool_results_found += 1

        print("🔧 Tool Execution Summary:")
        print(f"   Tool calls found: {tool_calls_found}")
        print(f"   Tool results found: {tool_results_found}")

        if tool_calls_found == 0:
            print("   ⚠️  No tool calls detected - LLM may not be triggering tools")
        elif tool_results_found == 0:
            print("   ⚠️  Tool calls found but no results - execution may have failed")
        else:
            print("   ✅ Tool calling workflow appears to be working")

    except Exception as e:
        print(f"❌ Error checking memory: {e}")
        import traceback

        traceback.print_exc()


async def main():
    """Main function."""

    session_id = sys.argv[1] if len(sys.argv) > 1 else "demo-session"
    await check_conversation_memory(session_id)


if __name__ == "__main__":
    asyncio.run(main())
